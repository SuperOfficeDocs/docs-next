---
import { Code } from 'astro:components';
import type { ManagedReferenceType, Reference } from "../types/YamlManagedReferencesTypes";
import type {indexDictionaryProps} from "../types/YamlManagedReferencesLayoutTypes"
import YamlItem from "@components/YamlItem.astro"
import { conversionList } from "@layouts/YamlLayoutPage.astro";
type Props = {
    data: ManagedReferenceType;
};

const { data } = Astro.props;

const getDataFromReference = (uid:string) : Reference => {
  return data.references.filter((item) => {
    return item.uid == uid
  })[0]
}

const indexDictionary : indexDictionaryProps = {}

data.items.forEach( (item , index) => {
  const key = item.type as keyof indexDictionaryProps;
  if (!indexDictionary[key]) {
    indexDictionary[key] = []; 
  }
  indexDictionary[key].push(index);
})

const selectedKeys = ["Constructor", "Method", "Property"];


---

<div class="w-full">

    <p class="mt-0 pt-0" set:html = {data.items[0].summary}></p>

    {/* Inheritance */}
    {data.items[0].inheritance &&
      <div class="m-0">
        <p class="font-medium text-sm border-b-[1px] mb-0 pb-1 border-gray-300">Inheritance</p>
        <ul class="list-none [&>*]:my-0 m-0 p-0">{data.items[0].inheritance.map( (inheritClass :string) => {
            return <div> ↳ <a class="no-underline text-orange-500 font-normal hover:underline" href={getDataFromReference(inheritClass).href}>{inheritClass.split(".").pop()} </a></div>
        })}</ul>
        <p class="ml-4 my-0">↳ {data.items[0].id}</p>
        <ul class="list-none ml-2 text-orange-500 [&>*]:my-0 my-0">{data.items[0].derivedClasses &&  data.items[0].derivedClasses.map( (inheritClass :string) => {
            return <li class=""> ↳ {inheritClass.split(".").pop()} </li>
        })}</ul>
      </div>
    }

    <!-- Inherited Members -->
    {data.items[0].inheritedMembers &&
      <div class="m-0">
        <p class="font-medium text-sm border-b-[1px] pb-1 mb-0 border-gray-300">Inherited Members</p>
        <ul class="list-none [&>*]:my-0 m-0 p-0">
          {data.items[0].inheritedMembers.map( (item :string) => {
            return <li><a class="no-underline text-orange-500 font-normal hover:underline" href={getDataFromReference(item).href}>{item.split(".").slice(1).join(".")} </a> </li>
          })}
        </ul>
      </div>
    }
        
    {/* Implements */}
    {
      data.items[0].implements && (
        <div class="">
          <h2 class="font-medium text-sm">Implements</h2>
          <p class="text-orange-500">{data.items[0].implements?.map( (implementItem :string) => {
          return implementItem.split(".").pop()})}
          </p>
        </div>
      )
    }

    { data.items[0].namespace && <h2 class="text-xs"><span class="font-bold mr-1">Namespace:</span><a href={`${data.items[0].namespace}`} class="text-orange-600"> {data.items[0].namespace}</a></h2>}
    { data.items[0].assemblies && <h2 class="text-xs"><span class="font-bold mr-1">Assembly:</span><span class="font-semibold">{data.items[0].assemblies}.dll</span></h2>}

    { data.items[0].syntax && (
      <p class="font-medium text-sm text-black">Syntax</p>
      <div class="prose"><Code code={data.items[0].syntax?.content} lang={"csharp"} theme="houston"/></div>
    )}
    
    {/* Remarks */}
    {data.items[0].remarks && ( 
      <div class="w-full">
        <h2 class="font-bold text-sm">Remarks</h2>
        <pre class="text-base bg-white text-inherit font-sans w-full overflow-x-auto whitespace-pre-line">{data.items[0].remarks}</pre>
      </div>)}
    
    {/* Examples */}
    {data.items[0].example && data.items[0].example.length > 0 && ( <div>
        <h2 class="font-bold text-sm">Examples</h2>
        <p set:html = {data.items[0].example}></p>
      </div>)}
    
    {Object.entries(indexDictionary)
      .filter(([typeName]) => selectedKeys.includes(typeName))
      .map(([typeName, items]) => (
        <div>
          <h2 id={conversionList[typeName as keyof typeof conversionList]} class="text-2xl">
            {conversionList[typeName as keyof typeof conversionList]}
            </h2>
          <div>
            {items.map( (indexNo) => {
              return <YamlItem ref={data.references} item={data.items[indexNo]} />
            })}
          </div>
        </div>
    ))}

    {indexDictionary.Field?.length > 0 && (
      <div>
        <h2 id="Fields" class="text-2xl font-bold">Fields</h2>
        
        {data.items[0].type == "Enum" 
        ? (
          <table class="">
            <tr class="[&>th]:font-bold [&>th]:border [&>th]:p-2 [&>th]:border-slate-400">
              <th>Name</th>
              <th>Description</th>
            </tr>
            {
              indexDictionary.Field.map( (indexNo) => {
              return (
                <tr class="even:bg-neutral-100 [&>td]:pl-2  [&>td]:border [&>td]:border-slate-300">
                  <td>{data.items[indexNo].name}</td>
                  <td>{data.items[indexNo].summary}</td>
                </tr>
              )
            })
            }
          </table>)
        : indexDictionary.Field.map( (indexNo) => {
            return <YamlItem ref={data.references} item={data.items[indexNo]} />
          })

        }
      </div>
    )}
   

    


    {
      data.items[0].implements && data.items[0].implements?.length > 0 &&
      <div>
        <h2 id="Implements" class="text-2xl">Implements</h2>
        <div class="">
          {
          data.items[0].implements?.map( (itemUid) => {
            return (
                  <a class="text-orange-600 no-underline hover:underline font-normal" 
                      href={itemUid}>{getDataFromReference(itemUid).name}
                  </a>
            )
                  
          })
        }
        </div>
      </div>
    }

    <!-- Extension Methods -->
    {data.items[0].extensionMethods &&
      <div class="m-0">
        <h2 class="text-2xl mb-2">Extension Methods</h2>
        <ul class="list-none [&>*]:my-0 m-0 p-0">
          {data.items[0].extensionMethods.map( (item :string) => {
            return <li><a class="no-underline text-orange-500 font-normal hover:underline" href={getDataFromReference(item).href}>{getDataFromReference(item).nameWithType} </a> </li>
          })}
        </ul>
      </div>
    }
</div>