---
import Base from "./Base.astro";
import "@styles/main.css";
import type { CategoryContentItem } from "../types/CategoryPageTypes";
import CategoryLandingCard from "@components/CategoryLandingCard.astro";
import CategoryLandingAddtionalContentCard from "@components/CategoryLandingAdditionalContentCard.astro";
import IconSelection from "@components/IconSelection";
import PageHeader from "@components/PageHeader.astro";
import {resolveRelativeFilePath} from "@utils/slugUtils";

const currentPath = Astro.url.pathname;


const { data, category, collection, lang } = Astro.props;

const metadata = {
  title: data.title,
  description: "Learn",
  uid: "help"
};

type Props = {
  data: CategoryContentItem;
  category: string;
  collection : string;
  lang:string;
};

const isPicture = (name : string) : boolean => {
  return name.endsWith(".png")
}

const getRelativeImgPath = (path:string) :string => {
  const imgUrlPath = "../assets/common/icons/";
  return imgUrlPath + path.split("/").pop();
;}

/**
 * Imports all image files (png, jpg, svg) from the icons directory with eager loading.
 * 
 * @constant {Record<string, ImageMetadata>} imagesEager
 * @property {string} src - The source path of the image
 * @property {number} width - The width of the image in pixels
 * @property {number} height - The height of the image in pixels
 * @property {string} format - The file format of the image
 * 
 * Uses Vite's import.meta.glob for static asset handling with eager loading enabled
 * to immediately execute the imports during the build time rather than dynamically.
 */
const imagesEager = import.meta.glob(
  '/src/assets/common/icons/*.{png,jpg,svg}',
  { eager: true, import: 'default' }
) as Record<string, { src: string; width: number; height: number; format: string }>;

/**
 * Creates a mapping of image filenames to their corresponding URLs.
 * 
 * @param {Object} imagesEager - Object containing full file paths and URLs of images
 * @returns {Object} A new object where keys are filenames (without path) and values are URLs
 * 
 * Example:
 * Input: { '/path/to/image.jpg': 'http://example.com/image.jpg' }
 * Output: { 'image.jpg': 'http://example.com/image.jpg' }
 */
// 2) Build map filename -> url
const imgMap = Object.fromEntries(
  Object.entries(imagesEager).map(([fullPath, url]) => [fullPath.split('/').pop()!, url])
);
---

<Base metadata={metadata} lang={lang}>
  <div class="relative mb-[120px] md:mb-[70px]">

    {category == "learn" && ( 
      <PageHeader filePath={currentPath} metadata={metadata} isLearnCategoryPage={true}/>) }

    <!-- Top Banner -->
    <div
      class="w-full text-white h-44 bg-gradient-to-r from-seaFoamGreen to-superOfficeGreen"
    >
      <p class="absolute text-2xl font-bold top-16 left-20">
        {data.title}
      </p>
      <p class="absolute top-24 left-20">{data.summary}</p>
    </div>



    <!-- Highlighted Content -->
    <div
      class="px-16 py-12 h-fit grid grid-cols-1 lg:grid-cols-3 xl:grid-cols-4 gap-6 justify-center items-center w-full"
    >
      {
        data.highlightedContent.items.map((item) => {
          const fileName = item.itemType?.split('/').pop();
          const src = fileName ? imgMap[fileName].src : undefined;
          return (
            <div>
              <div class="h-[130px] border rounded-md border-gray-300 p-1 hover:border-black">
                <a href={resolveRelativeFilePath(currentPath,item.url)}>
                  <div class="flex flex-row border h-full border-gray-300 duration-300 ease-in-out transition-shadow hover:shadow-[0_0px_8px_rgba(0,0,0,0.50)] py-4">
                    <div class="w-12 h-full pt-4 ml-8">
                      {item.itemType && (isPicture(item.itemType) ? <img src={src} alt={item.text}/> : <IconSelection size={32} iconType={item.itemType} color="#0c5d58" />)}
                    </div>
                    <div class="w-full px-3 flex flex-col justify-center">
                      <p class="uppercase mb-4 font-medium text-sm ">
                        {item.title}
                      </p>
                      <p>{item.typeDesc}</p>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          );
        })
      }
    </div>



    <!-- Conceptual Content -->
    <div class="bg-lightTealGray px-20 border border-transparent">
      {
        data.conceptualContent && (
          <div class="mt-16 mb-16 w-full">

            {data.conceptualContent.title && (
              <p class=" text-2xl pb-3 font-bold">
                {data.conceptualContent.title}
              </p>
            )}
            {data.conceptualContent.summary && (
              <p class="pb-8">{data.conceptualContent.summary}</p>
            )}
            
            <div class="grid grid-cols-1 lg:grid-cols-3 xl:grid-cols-4 gap-x-5 gap-y-7 auto-rows-max ">
              {data.conceptualContent?.items.map((item, id) => {
                return <CategoryLandingCard currentPath={currentPath} item={item} id={id} />;
              })}
            </div>
          </div>
        )
      }
    </div>


    <!-- Tools -->
    <div class=`bg-white px-20 border border-transparent ${!data.tools && "hidden"}`>
      {
        data.tools && (
          <div class="my-10"> 
            {data.tools.title && (
              <p class=" text-2xl pb-3 font-bold">
                {data.tools.title}
              </p>
            )}
           {data.tools.summary && (
              <p class="pb-8">{data.tools.summary}</p>
            )}
            <div class="grid grid-cols-1 lg:grid-cols-3 xl:grid-cols-4  gap-5">
              {data.tools.items.map( (item) => {
                return (
                   <div class="flex flex-row border font-semibold h-20 w-full items-center pl-10 border-gray-300 duration-300 ease-in-out transition-shadow hover:shadow-[0_0px_8px_rgba(0,0,0,0.50)] py-4">
                    <a href={resolveRelativeFilePath(currentPath,item.url)}>{item.title}</a>
                   </div>)
            })}
            </div>
          </div>  
        )
      }
    </div>



    <!-- Additional Content -->
    <div class="bg-lightTealGray px-20 border border-transparent">
      {
        data.additionalContent && (
          <div class="flex flex-col my-10 w-full">
            {data.additionalContent.sections.map((section) => {
              return (
                <div>                  
                  {section.title && <p class=" text-2xl font-bold class mb-3">{section.title}</p>}
                  {section.summary && <p class="mb-8">{section.summary}</p>}
                </div>

                <div class="grid grid-cols-1 lg:grid-cols-3 xl:grid-cols-4  gap-x-5 gap-y-7 auto-rows-max  w-full mt-2 my-10">
                  {section.items.map((item, id) => {
                    
                    return (
                      <CategoryLandingAddtionalContentCard
                        item={item}
                        currentPath={currentPath}
                      />
                    );
                  })}
                </div>
              );
            })}
          </div>
        )
      }
    </div>



    
  </div>
</Base>
